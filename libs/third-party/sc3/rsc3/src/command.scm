;; scsynth commands

(define b-alloc (lambda (b nf nc) (message "/b_alloc" (list b nf nc))))
(define b-alloc-read (lambda (b fn f0 n) (message "/b_allocRead" (list b fn f0 n))))
(define b-alloc-read-channel (lambda (nid p f n cs) (message "/b_allocReadChannel" (append (list nid p f n) cs))))
(define b-close (lambda (i) (message "/b_close" (list i))))
(define b-fill1 (lambda (i j k f) (message "/b_fill" (list i j k f))))
(define b-free (lambda (i) (message "/b_free" (list i))))
(define b-gen1 (lambda (i s fs) (message "/b_gen" (cons i (cons s fs)))))
(define b-get1 (lambda (i j) (message "/b_get" (list i j))))
(define b-getn1 (lambda (i j k) (message "/b_getn" (list i j k))))
(define b-query1 (lambda (i) (message "/b_query" (list i))))
(define b-read (lambda (id path frame n bframe flag) (message "/b_read" (list id path frame n bframe flag))))
(define b-set1 (lambda (i j f) (message "/b_set" (list i j f))))
(define b-setn1 (lambda (i j fs) (message "/b_setn" (cons i (cons j (cons (length fs) fs))))))
(define b-write (lambda (id path header type frames start flag) (message "/b_write" (list id path header type frames start flag))))
(define b-zero (lambda (i) (message "/b_zero" (list i))))

(define c-fill1 (lambda (i j f) (message "/c_fill" (list i j f))))
(define c-get1 (lambda (i) (message "/c_get" (list i))))
(define c-getn1 (lambda (i j) (message "/c_getn" (list i j))))
(define c-set1 (lambda (i f) (message "/c_set" (list i f))))
(define c-setn1 (lambda (i fs) (message "/c_setn" (cons i (cons (length fs) fs)))))

(define d-free1 (lambda (s) (message "/d_free" (list s))))
(define d-load (lambda (s) (message "/d_load" (list s))))
(define d-load-dir (lambda (s) (message "/d_loadDir" (list s))))
(define d-recv (lambda (b) (message "/d_recv" (list b))))

(define g-deep-free1 (lambda (i) (message "/g_deepFree" (list i))))
(define g-free-all1 (lambda (i) (message "/g_freeAll" (list i))))
(define g-head1 (lambda (i j) (message "/g_head" (list i j))))
(define g-new1 (lambda (i j k) (message "/g_new" (list i j k))))
(define g-tail1 (lambda (i j) (message "/g_tail" (list i j))))

(define n-before (lambda (i j) (message "/n_before" (list i j))))
(define n-fill1 (lambda (i s j f) (message "/n_fill" (list i s j f))))
(define n-free1 (lambda (i) (message "/n_free" (list i))))
(define n-map (lambda (i s j) (message "/n_map" (list i s j))))
(define n-mapn1 (lambda (i s j k) (message "/n_mapn" (list i s j k))))
(define n-query (lambda (i) (message "/n_query" (list i))))
(define n-run1 (lambda (i j) (message "/n_run" (list i j))))
(define n-set (lambda (i xys) (let ((z (concat-map (lambda (xy) (list (car xy) (cdr xy))) xys))) (message "/n_set" (cons i z)))))
(define n-set1 (lambda (i s f) (message "/n_set" (list i s f))))
(define n-setn1 (lambda (i s fs) (message "/n_setn" (cons i (cons s (cons (length fs) fs))))))
(define n-trace (lambda (i) (message "/n_trace" (list i))))

(define s-get1 (lambda (i j) (message "/s_get" (list i j))))
(define s-getn1 (lambda (i s j) (message "/s_getn" (list i s j))))
(define s-new (lambda (s i j k cs) (message "/s_new" (append (list s i j k) cs))))
(define s-new0 (lambda (s i j k) (message "/s_new" (list s i j k))))
(define s-new1 (lambda (s i j k t f) (message "/s_new" (list s i j k t f))))
(define s-new2 (lambda (s i j k t1 f1 t2 f2) (message "/s_new" (list s i j k t1 f1 t2 f2))))
(define s-noid (lambda (i) (message "/s_noid" (list i))))

(define clear-sched (message "/clearSched" nil))
(define dump-osc (lambda (i) (message "/dumpOSC" (list i))))
(define notify (lambda (i) (message "/notify" (list i))))
(define quit (message "/quit" nil))
(define status (message "/status" nil))
(define sync (lambda (i) (message "/sync" (list i))))

(define lucier-wire
  (lambda (freq)
    (let* ((block-size (recip control-rate))
	   (mk-dt (lambda (f) (sub (recip f) block-size)))
	   (string-delay (mk-dt freq)) (pk1-pos 0.1)
	   (src-pos 0.3) (pk2-pos 0.9) (max-delay 1.0)
	   (mk-delay (lambda (i r) (lpz1 (delay-c i max-delay (mul r string-delay)))))
	   (mk-allpass (lambda (i r dt) (lpz1 (allpass-c i max-delay (mul r string-delay) dt))))
	   (drv (local-in 1 ar 0))
	   (pk1-r (let ((i drv) (r (sub src-pos pk1-pos))) (mk-delay i r)))
	   (pk1-l (let ((i (mul pk1-r (negate 1)))
			(r (mul pk1-pos 2))
			(dt (rand 1.0e-3 0.11)))
		    (mk-allpass i r dt)))
	   (pk2-l (let ((i pk1-l) (r (sub pk2-pos pk1-pos))) (mul (mk-delay i r) 0.99)))
	   (string-l (let ((i pk2-l) (r (sub 1.0 pk2-pos))) (mk-delay i r)))
	   (pk2-r (let ((i (mul string-l (negate 1)))
			(r (sub 1.0 pk2-pos))
			(dt (add 2 (rand 1.0e-3 0.11))))
		    (mul (mk-allpass i r dt) 0.99)))
	   (string-r (let ((i pk2-r) (r (sub pk2-pos src-pos))) (mk-delay i r)))
	   (source (let* ((s (mul (sin-osc ar 220 0) 1.0e-2))
			  (p (mul (pulse ar (add 60 (mul (amplitude kr drv 1.0e-2 1.0e-2) 11)) 0.5) 0.1))
			  (f (rlpf (add s p) 320 5.0e-2)) (e (sub 1.0 (u:min (amplitude kr drv 1.0e-2 1.0e-2) 1.0))))
		     (mul (normalizer f 0.7 1.0e-2) e)))
	   (l-out (local-out (add (mul source 0.2) string-r)))
	   (out-l (add pk1-l pk1-r)) (out-r (add pk2-l pk2-r)))
      (mrg-n (list (mce2 out-l out-r) drv source l-out)))))

(audition (out 0 (lucier-wire 60)))
